type Post {
    postId: ID!
    title: String!
    content: String
    userNm: String
    userId: String
    categoryId: String
    viewCnt: Int
    likeCnt: Int
    commentCnt: Int
    isNotice: Boolean
    status: String
    regDt: String
    modDt: String
    profileImgUrl: String
}

type Comment {
    commentId: ID!
    postId: ID!
    userId: String!
    userNm: String
    content: String!
    likeCnt: Int
    regDt: String
    modDt: String
    profileImgUrl: String
}

type Category {
    id: ID!
    name: String!
    description: String
    icon: String
    color: String
    sortOrder: Int
}

type Contributor {
    id: ID!
    name: String!
    avatar: String
    contributions: Int!
}

type PostsResponse {
    posts: [Post!]!
    totalCount: Int!
}

type Query {
    # 게시글 관련 쿼리
    posts(categoryId: String, offset: Int = 0, size: Int = 10, sortBy: String = "regDt DESC"): PostsResponse!
    post(postId: ID!): Post
    categories: [Category!]!
    contributors: [Contributor!]!
    comments(postId: ID!, offset: Int = 0, size: Int = 10): [Comment!]!
    searchPosts(keyword: String!, offset: Int = 0, size: Int = 10): PostsResponse!
}

type Mutation {
	# 게시글 관련 뮤테이션
    createPost(title: String!, content: String!, categoryId: String!): Post!
    updatePost(postId: ID!, title: String!, content: String!, categoryId: String!): Post!
    deletePost(postId: ID!): Boolean!
    
    # 좋아요 관련 뮤테이션
    addLike(postId: ID!, userId: String!): Boolean!
    removeLike(postId: ID!, userId: String!): Boolean!
    
    # 댓글 관련 뮤테이션
    createComment(postId: ID!, content: String!): Comment!
    deleteComment(commentId: ID!, postId: ID!): Boolean!
}